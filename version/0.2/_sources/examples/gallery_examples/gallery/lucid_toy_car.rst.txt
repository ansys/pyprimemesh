
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/gallery/lucid_toy_car.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_gallery_lucid_toy_car.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_gallery_lucid_toy_car.py:


.. _ref_toy_car_wrap:

======================================
Wrapping a Toy Car for a Flow Analysis
======================================

**Summary**: This example illustrates how to wrap a toy car for a flow analysis.

Objective
~~~~~~~~~
In this example, we will wrap a toy car and volume mesh with a tetrahedral mesh with prisms.
We will use several meshing utilities available in the lucid class for convenience and ease.

.. image:: ../../../images/toy_car.png
   :align: center
   :width: 400
   :alt: Toy car wrap.

Procedure
~~~~~~~~~
* Launch Ansys Prime Server instance and instantiate meshing utilities from lucid class.
* Import geometry.
* Coarse wrap parts with holes to cleanup.
* Extract fluid region using wrapper.
* Check wrap surface is closed and suitable quality.
* Mesh only fluid with tetrahedral elements and boundary layer refinement.
* Create face zones from labels imported from geometry.
* Print statistics on generated mesh.
* Improve mesh quality.
* Write a cas file for use in the Fluent solver.
* Exit the PyPrimeMesh session.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

Launch Ansys Prime Server
~~~~~~~~~~~~~~~~~~~~~~~~~
Import all necessary modules and launch an instance of Ansys Prime Server.
From the PyPrimeMesh client get the model.
Instantiate meshing utilities from lucid class.

.. GENERATED FROM PYTHON SOURCE LINES 41-52

.. code-block:: default


    import ansys.meshing.prime as prime
    from ansys.meshing.prime.graphics import Graphics
    import os, tempfile

    prime_client = prime.launch_prime()
    model = prime_client.model
    display = Graphics(model=model)

    mesh_util = prime.lucid.Mesh(model)








.. GENERATED FROM PYTHON SOURCE LINES 53-57

Import Geometry
~~~~~~~~~~~~~~~
Download the toy car geometry file (.fmd file exported by SpaceClaim).
Import geometry and display everything except tunnel.

.. GENERATED FROM PYTHON SOURCE LINES 57-65

.. code-block:: default


    toy_car = prime.examples.download_toy_car_fmd()

    mesh_util.read(file_name=toy_car)

    scope = prime.ScopeDefinition(model, part_expression="* !*tunnel*")
    display(scope=scope)




.. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_001.png
   :alt: lucid toy car
   :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-74

Close Holes
~~~~~~~~~~~
Several parts are open surfaces (with holes).
Coarse wrap to close holes and delete originals.
We could use leakage detection to close these regions.
Here we use a coarse wrap and disable feature edge refinement to walk over the holes.
As this is not the final wrap we do not need to remesh after the wrap.
Wrapping each object in turn we avoid the coarse wrap bridging across narrow gaps.

.. GENERATED FROM PYTHON SOURCE LINES 74-89

.. code-block:: default


    coarse_wrap = {"cabin": 1.5, "exhaust": 0.6, "engine": 1.5}

    for part_name in coarse_wrap:
        # Each open part before wrap
        display(scope=prime.ScopeDefinition(model, part_expression=part_name))
        closed_part = mesh_util.wrap(
            input_parts=part_name,
            max_size=coarse_wrap[part_name],
            remesh_postwrap=False,
            enable_feature_octree_refinement=False,
        )
        # Closed part with no hole
        display(scope=prime.ScopeDefinition(model, part_expression=closed_part.name))




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_002.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_003.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_003.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_004.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_004.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_005.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_005.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_006.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_006.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_007.png
          :alt: lucid toy car
          :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_007.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 90-97

Extract Fluid using Wrapper
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Wrap full model and extract largest internal region as the fluid.
Create edges at intersecting regions to improve quality.
Refining mesh to avoid contact between different parts.
The new wrap object replaces all original geometry unless "keep_input"
is set to TRUE.  Volumes are generated from the wrap for use later.

.. GENERATED FROM PYTHON SOURCE LINES 97-108

.. code-block:: default


    wrap_part = mesh_util.wrap(
        min_size=0.1,
        max_size=2.0,
        region_extract=prime.WrapRegion.LARGESTINTERNAL,
        create_intersection_loops=True,
        contact_prevention_size=0.1,
    )

    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Part Summary:

    Part Name: __wrap__.3
    Part ID: 23
        1 Edge Zonelets
        93 Face Zonelets
        0 Cell Zonelets

        0 Edge Zones
            Edge Zone Name(s) : []
        5 Face Zones
            Face Zone Name(s) : [surface, surface.1, cabin, exhaust, engine]
        6 Volume Zones
            Volume Zone Name(s) : [__wrap__.2, __wrap__.1, __wrap__, component25, component24, tunnel.1]

        24 Label(s)
            Names: [___geom_features___, __extracted__features__, __intersect_loops__, __wrap__, __wrap__.1, __wrap__.2, cabin, component21, component22, component24, component25, engine, exhaust, ground, inlet, outer, outlet, overlap_floor, tunnel, unreferenced, wheel_1, wheel_2, wheel_3, wheel_4]

        Bounding box (-31.1366 -59.1336 1.49043)
                     (29.3366 40.1337 52.0558)





.. GENERATED FROM PYTHON SOURCE LINES 109-112

Check Wrap
~~~~~~~~~~
Check wrap surface is closed and suitable quality to use as surface mesh.

.. GENERATED FROM PYTHON SOURCE LINES 112-142

.. code-block:: default


    scope = prime.ScopeDefinition(model=model, part_expression=wrap_part.name)
    diag = prime.SurfaceSearch(model)

    diag_params = prime.SurfaceDiagnosticSummaryParams(
        model,
        scope=scope,
        compute_free_edges=True,
        compute_multi_edges=True,
        compute_self_intersections=True,
    )

    diag_res = diag.get_surface_diagnostic_summary(diag_params)

    print('Number of free edges', diag_res.n_free_edges)
    print('Number of multi edges', diag_res.n_multi_edges)
    print('Number of self intersections', diag_res.n_self_intersections)

    face_quality_measures = [prime.FaceQualityMeasure.SKEWNESS, prime.FaceQualityMeasure.ASPECTRATIO]
    quality_params = prime.SurfaceQualitySummaryParams(
        model=model, scope=scope, face_quality_measures=face_quality_measures, quality_limit=[0.9, 20]
    )

    quality = prime.SurfaceSearch(model)
    qual_summary_res = quality.get_surface_quality_summary(quality_params)

    for summary_res in qual_summary_res.quality_results:
        print("\nMax value of ", summary_res.measure_name, ": ", summary_res.max_quality)
        print("Faces above limit: ", summary_res.n_found)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of free edges 0
    Number of multi edges 0
    Number of self intersections 0

    Max value of  Skewness :  0.881896
    Faces above limit:  0

    Max value of  AspectRatio :  8.8903
    Faces above limit:  0




.. GENERATED FROM PYTHON SOURCE LINES 143-152

Create Zones
~~~~~~~~~~~~
Create face zones from labels imported from geometry that can be used
in the solver to define boundary conditions.
If specifying individual labels to create zones the order is important.
Last label in the list will win.
Providing no label_expression will flatten all labels into zones.
For example, if "LabelA" and "LabelB" are overlapping three zones will
be created; "LabelA", "LabelB" and "LabelA_LabelB".

.. GENERATED FROM PYTHON SOURCE LINES 152-157

.. code-block:: default


    mesh_util.create_zones_from_labels()

    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Part Summary:

    Part Name: __wrap__.3
    Part ID: 23
        1 Edge Zonelets
        93 Face Zonelets
        0 Cell Zonelets

        0 Edge Zones
            Edge Zone Name(s) : []
        21 Face Zones
            Face Zone Name(s) : [surface, surface.1, cabin, exhaust, engine, __wrap__.2_engine_unreferenced, __wrap__.1_exhaust_unreferenced, __wrap___cabin_unreferenced, unreferenced_wheel_2, unreferenced_wheel_3, unreferenced_wheel_4, unreferenced_wheel_1, outer_unreferenced, inlet_tunnel, ground_overlap_floor_tunnel, tunnel_unreferenced, outlet_tunnel, component21_unreferenced, component22_unreferenced, component24_unreferenced, component25_unreferenced]
        6 Volume Zones
            Volume Zone Name(s) : [__wrap__.2, __wrap__.1, __wrap__, component25, component24, tunnel.1]

        24 Label(s)
            Names: [___geom_features___, __extracted__features__, __intersect_loops__, __wrap__, __wrap__.1, __wrap__.2, cabin, component21, component22, component24, component25, engine, exhaust, ground, inlet, outer, outlet, overlap_floor, tunnel, unreferenced, wheel_1, wheel_2, wheel_3, wheel_4]

        Bounding box (-31.1366 -59.1336 1.49043)
                     (29.3366 40.1337 52.0558)





.. GENERATED FROM PYTHON SOURCE LINES 158-165

Volume Mesh
~~~~~~~~~~~
Mesh only fluid volume with tetrahedral elements and boundary layer refinement.
Not meshing other volumetric regions.
Volume zones exist already for volume meshing and passing to the solver.
The largest face zonelet is used by default to define volume zone names at creation.
After volume meshing we can see we have a cell zonelet in the part summary.

.. GENERATED FROM PYTHON SOURCE LINES 165-189

.. code-block:: default


    volume = prime.lucid.VolumeScope(
        part_expression=wrap_part.name,
        entity_expression="tunnel*",
        scope_evaluation_type=prime.ScopeEvaluationType.ZONES,
    )

    # using expressions to define which surfaces to grow inflation layers from
    mesh_util.volume_mesh(
        scope=volume,
        prism_layers=3,
        prism_surface_expression="*cabin*,*component*,*engine*,*exhaust*,*ground*,*outer*,*wheel*",
        prism_volume_expression="tunnel*",
    )

    scope = prime.ScopeDefinition(
        model,
        label_expression="*cabin*,*component*,*engine*,*exhaust*,*ground*,*outer*,*wheel*,*outlet*",
    )

    display(update=True, scope=scope)

    print(model)




.. image-sg:: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_008.png
   :alt: lucid toy car
   :srcset: /examples/gallery_examples/gallery/images/sphx_glr_lucid_toy_car_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Part Summary:

    Part Name: __wrap__.3
    Part ID: 23
        1 Edge Zonelets
        93 Face Zonelets
        1 Cell Zonelets

        0 Edge Zones
            Edge Zone Name(s) : []
        21 Face Zones
            Face Zone Name(s) : [surface, surface.1, cabin, exhaust, engine, __wrap__.2_engine_unreferenced, __wrap__.1_exhaust_unreferenced, __wrap___cabin_unreferenced, unreferenced_wheel_2, unreferenced_wheel_3, unreferenced_wheel_4, unreferenced_wheel_1, outer_unreferenced, inlet_tunnel, ground_overlap_floor_tunnel, tunnel_unreferenced, outlet_tunnel, component21_unreferenced, component22_unreferenced, component24_unreferenced, component25_unreferenced]
        6 Volume Zones
            Volume Zone Name(s) : [__wrap__.2, __wrap__.1, __wrap__, component25, component24, tunnel.1]

        24 Label(s)
            Names: [___geom_features___, __extracted__features__, __intersect_loops__, __wrap__, __wrap__.1, __wrap__.2, cabin, component21, component22, component24, component25, engine, exhaust, ground, inlet, outer, outlet, overlap_floor, tunnel, unreferenced, wheel_1, wheel_2, wheel_3, wheel_4]

        Bounding box (-31.1366 -59.1336 1.49043)
                     (29.3366 40.1337 52.0558)





.. GENERATED FROM PYTHON SOURCE LINES 190-193

Print Mesh Stats
~~~~~~~~~~~~~~~~
Print statistics on generated mesh.

.. GENERATED FROM PYTHON SOURCE LINES 193-224

.. code-block:: default


    vtool = prime.VolumeMeshTool(model=model)
    result = vtool.check_mesh(part_id=wrap_part.id, params=prime.CheckMeshParams(model=model))

    print("Non positive volumes:", result.has_non_positive_volumes)
    print("Non positive areas:", result.has_non_positive_areas)
    print("Invalid shape:", result.has_invalid_shape)
    print("Left handed faces:", result.has_left_handed_faces)

    quality = prime.VolumeSearch(model)
    scope = prime.ScopeDefinition(model, part_expression=wrap_part.name)

    part_summary_res = wrap_part.get_summary(
        prime.PartSummaryParams(model=model, print_id=False, print_mesh=True)
    )

    print("\nNo. of cells : ", part_summary_res.n_cells)

    qual_summary_res = quality.get_volume_quality_summary(
        prime.VolumeQualitySummaryParams(
            model=model,
            scope=scope,
            cell_quality_measures=[prime.CellQualityMeasure.SKEWNESS],
            quality_limit=[0.95],
        )
    )

    for summary_res in qual_summary_res.quality_results_part:
        print("\nMax value of ", summary_res.measure_name, ": ", summary_res.max_quality)
        print("Cells above limit: ", summary_res.n_found)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Non positive volumes: False
    Non positive areas: False
    Invalid shape: False
    Left handed faces: False

    No. of cells :  3317673

    Max value of  Skewness :  0.999072
    Cells above limit:  150




.. GENERATED FROM PYTHON SOURCE LINES 225-228

Improve Quality
~~~~~~~~~~~~~~~
Mesh quality is poor.  We can use Auto-Node Move to improve the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 228-267

.. code-block:: default


    improve = prime.VolumeMeshTool(model=model)
    params = prime.AutoNodeMoveParams(
        model=model,
        quality_measure=prime.CellQualityMeasure.SKEWNESS,
        target_quality=0.95,
        dihedral_angle=90,
        n_iterations_per_node=50,
        restrict_boundary_nodes_along_surface=True,
        n_attempts=10,
    )

    improve.improve_by_auto_node_move(
        part_id=wrap_part.id,
        cell_zonelets=wrap_part.get_cell_zonelets(),
        boundary_zonelets=wrap_part.get_face_zonelets(),
        params=params,
    )

    result = vtool.check_mesh(part_id=wrap_part.id, params=prime.CheckMeshParams(model=model))

    print("Non positive volumes:", result.has_non_positive_volumes)
    print("Non positive areas:", result.has_non_positive_areas)
    print("Invalid shape:", result.has_invalid_shape)
    print("Left handed faces:", result.has_left_handed_faces)

    qual_summary_res = quality.get_volume_quality_summary(
        prime.VolumeQualitySummaryParams(
            model=model,
            scope=scope,
            cell_quality_measures=[prime.CellQualityMeasure.SKEWNESS],
            quality_limit=[0.95],
        )
    )

    for summary_res in qual_summary_res.quality_results_part:
        print("\nMax value of ", summary_res.measure_name, ": ", summary_res.max_quality)
        print("Cells above limit: ", summary_res.n_found)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Non positive volumes: False
    Non positive areas: False
    Invalid shape: False
    Left handed faces: False

    Max value of  Skewness :  0.949975
    Cells above limit:  0




.. GENERATED FROM PYTHON SOURCE LINES 268-271

Write Mesh
~~~~~~~~~~
Write a cas file for use in the Fluent solver.

.. GENERATED FROM PYTHON SOURCE LINES 271-277

.. code-block:: default

    with tempfile.TemporaryDirectory() as temp_folder:
        mesh_file = os.path.join(temp_folder, "toy_car_lucid.cas")
        mesh_util.write(mesh_file)
        assert os.path.exists(mesh_file)
        print("\nExported file:\n", mesh_file)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Exported file:
     /tmp/tmp38vu3tup/toy_car_lucid.cas




.. GENERATED FROM PYTHON SOURCE LINES 278-280

Exit PyPrimeMesh
~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 280-282

.. code-block:: default


    prime_client.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  59.636 seconds)


.. _sphx_glr_download_examples_gallery_examples_gallery_lucid_toy_car.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lucid_toy_car.py <lucid_toy_car.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lucid_toy_car.ipynb <lucid_toy_car.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
