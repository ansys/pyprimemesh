    # check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
    branches:
      - main
      - release/*
  push:
    tags:
      - "v*"
    branches:
      - main
      - release/*

env:
  DOCKER_PACKAGE: ghcr.io/pyansys/prime:latest
  MAIN_PYTHON_VERSION: '3.9'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Style Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install style requirements
        run: |
          pip install codespell==2.2.2 flake8==6.0.0

      - name: Codespell
        run: |
          make codespell

      - name: flake8
        run: |
          make flake8

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build the package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}
      
      - name: Check for pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

      - name: Build the library
        run: |
          pip install build
          python -m build .
      
      - name: Check package
        run: |
          pip install twine
          twine check dist/*
      
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: pyprimemesh-client
          path: dist/
          retention-days: 7
      
  smoke:
    name: Smoke testing the client for different platforms
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11' ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v3
        with:
          name: pyprimemesh-client
          path: dist

      - name: Install Library
        run: |
          pip install ansys-meshing-prime[all] --find-links dist --pre

      - name: Test import
        run: |
          python -c "import ansys.meshing.prime as pyprimemesh; print('Successfully imported ansys.meshing.prime')"
          python -c "from ansys.meshing.prime import __version__; print(__version__)"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [ docs-style ]
    steps:
      - uses: actions/checkout@v3
      
      # Used to only publish documentation when there is a push
      - name: Get Bot Application Token
        if: github.event_name == 'push'
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}
            
      - name: Install library and documentation requirements
        run: |
          pip install -e .[all,doc]

      - name: Login in Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: pyansys-bot
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate prime service
        run: docker pull ${{ env.DOCKER_PACKAGE }}

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Build HTML
        run: |
          make -C doc html #SPHINXOPTS="-W"
        env:
          PYPRIMEMESH_LAUNCH_CONTAINER: 1
          PYPRIMEMESH_SPHINX_BUILD: 1
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER )}}

      # - name: Build PDF Documentation
      #   run: |
      #     sudo apt update
      #     sudo apt-get install -y texlive-latex-extra latexmk
      #     make -C doc latexpdf

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: pyprimemesh-docs-html
          path: doc/build/html
          retention-days: 7

      # - name: Upload PDF Documentation
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: pyprimemesh-docs-pdf
      #     path: doc/build/latex/*.pdf
      #     retention-days: 7
      
      - name: Deploy Stable Documentation
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'dev')
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          repository-name: pyansys/pyprimemesh-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: doc/build/html
          clean: true

      # Deploy Latest Developer Documentation
      - name: Deploy Documentation
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          repository-name: pyansys/pyprimemesh-dev-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: doc/build/html
          clean: true
  
  testing:
    name: Run Unit Tests
    needs: [ smoke ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-${{ runner.os }}-v${{ env.MAIN_PYTHON_VERSION }}

      - name: Login in Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: pyansys-bot
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Ansys Prime Server
        run: docker pull ${{ env.DOCKER_PACKAGE }}          

      - name: Install library with testing requirements and run tests
        env:
          PYPRIMEMESH_LAUNCH_CONTAINER: 1
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER )}}
        run: |
          pip install -e .[all,tests]
          pytest -v tests

  release:
    name: Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [ testing, style, docs ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/download-artifact@v3
        with:
          name: pyprimemesh-client
          path: dist

      # list current directory
      - name: List directory structure
        run: ls -R

      - name: Upload to Private PyPi
        run: |
          pip install twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: PAT
          TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
          TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
