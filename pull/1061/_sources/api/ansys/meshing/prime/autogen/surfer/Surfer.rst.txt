.. vale off







:class:`Surfer`
===============


.. py:class:: ansys.meshing.prime.autogen.surfer.Surfer(model: ansys.meshing.prime.autogen.coreobject.CommunicationManager, part_id: int)



   Generates surface mesh.

   Performs surface meshing using various surface meshing algorithms on topofaces or face zonelets.
   For example, constant size or volumetric size surface meshing.

   :param model: Server model to create Surfer object.
   :type model: Model
   :param part_id: Id of the part.
   :type part_id: int






.. py:currentmodule:: Surfer

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~create_shell_bl_using_controls`
            - Creates ShellBL using data stored in controls.
          * - :py:attr:`~initialize_surfer_params_for_wrapper`
            - Initializes surfer parameters to mesh surfaces generated by wrapper.
          * - :py:attr:`~mesh_topo_faces`
            - Performs meshing on the given topofaces with provided parameters.
          * - :py:attr:`~refacet_topo_faces`
            - Performs refaceting on the given topofaces with provided parameters.
          * - :py:attr:`~remesh_face_zonelets`
            - Performs meshing on the given face zonelets with provided parameters.
          * - :py:attr:`~remesh_face_zonelets_locally`
            - Remesh the given face zonelets locally at the registered faces with provided parameters.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter context for Surfer.
          * - :py:attr:`~__exit__`
            - Exit context for Surfer.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.surfer import Surfer



Method detail
-------------

.. py:method:: __enter__()

   Enter context for Surfer.


.. py:method:: __exit__(type, value, traceback)

   Exit context for Surfer.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: create_shell_bl_using_controls(part_id: int, shell_bl_control_ids: ansys.meshing.prime.params.primestructs.Iterable[int], shell_bl_params: ansys.meshing.prime.params.primestructs.ShellBLParams) -> ansys.meshing.prime.params.primestructs.CreateShellBLResults

   Creates ShellBL using data stored in controls.


   :param part_id: Id of the part.
   :type part_id: int
   :param shell_bl_control_ids: Ids of ShellBL control.
   :type shell_bl_control_ids: Iterable[int]
   :param shell_bl_params: Parameters related to ShellBL.
   :type shell_bl_params: ShellBLParams

   :returns: Returns the CreateShellBLResults.
   :rtype: CreateShellBLResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = surfer.create_shell_bl_using_controls(part_id,shell_bl_control_ids,shell_bl_params)


.. py:method:: initialize_surfer_params_for_wrapper() -> ansys.meshing.prime.params.primestructs.SurferParams

   Initializes surfer parameters to mesh surfaces generated by wrapper.


   :returns: Returns the SurferParams initialized for wrapper inputs.
   :rtype: SurferParams

   .. rubric:: Examples

   >>> surfer_params = surfer.initialize_surfer_params_for_wrapper()


.. py:method:: mesh_topo_faces(topo_faces: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.SurferParams) -> ansys.meshing.prime.params.primestructs.SurferResults

   Performs meshing on the given topofaces with provided parameters.


   :param topo_faces: Ids of topofaces.
   :type topo_faces: Iterable[int]
   :param params: Surfer Parameters.
   :type params: SurferParams

   :returns: Returns the SurferResults.
   :rtype: SurferResults

   .. rubric:: Examples

   >>> results = surfer.mesh_topo_faces(topo_faces, params)


.. py:method:: refacet_topo_faces(topo_faces: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.SurferParams) -> ansys.meshing.prime.params.primestructs.SurferResults

   Performs refaceting on the given topofaces with provided parameters.


   :param topo_faces: Ids of topofaces.
   :type topo_faces: Iterable[int]
   :param params: Surfer Parameters.
   :type params: SurferParams

   :returns: Returns the SurferResults.
   :rtype: SurferResults

   .. rubric:: Examples

   >>> results = surfer.RefacetTopoFaces(topo_faces, params)


.. py:method:: remesh_face_zonelets(face_zonelets: ansys.meshing.prime.params.primestructs.Iterable[int], edge_zonelets: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.SurferParams) -> ansys.meshing.prime.params.primestructs.SurferResults

   Performs meshing on the given face zonelets with provided parameters.


   :param face_zonelets: Ids of face zonelets.
   :type face_zonelets: Iterable[int]
   :param edge_zonelets: Ids of edge zonelets.
   :type edge_zonelets: Iterable[int]
   :param params: Surfer parameters.
   :type params: SurferParams

   :returns: Returns the SurferResults.
   :rtype: SurferResults

   .. rubric:: Examples

   >>> results = surfer.remesh_face_zonelets(face_zonelets, edge_zonelets, params)


.. py:method:: remesh_face_zonelets_locally(face_zonelets: ansys.meshing.prime.params.primestructs.Iterable[int], register_id: int, local_surfer_params: ansys.meshing.prime.params.primestructs.LocalSurferParams) -> ansys.meshing.prime.params.primestructs.LocalSurferResults

   Remesh the given face zonelets locally at the registered faces with provided parameters.


   :param face_zonelets: Ids of face zonelets.
   :type face_zonelets: Iterable[int]
   :param register_id: Register id of the target faces.
   :type register_id: int
   :param local_surfer_params: Local surfer Parameters.
   :type local_surfer_params: LocalSurferParams

   :returns: Returns the LocalSurferResults.
   :rtype: LocalSurferResults

   .. rubric:: Examples

   >>> results = surfer.remesh_face_zonelets_locally(face_zonelets, register_id, local_surfer_params)







.. vale on