.. vale off







:class:`Wrapper`
================


.. py:class:: ansys.meshing.prime.autogen.wrapper.Wrapper(model: ansys.meshing.prime.autogen.coreobject.CommunicationManager)



   Provide operations to generate surface mesh using wrapper technology.

   :param model: Server model to create Wrapper object.
   :type model: Model






.. py:currentmodule:: Wrapper

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~close_gaps`
            - Close gaps create patching surfaces within the face zonelets specified by scope using gap size.
          * - :py:attr:`~improve_quality`
            - Improve the surface quality and resolve connectivity issues like intersections, multi, free, spikes, point contacts and so on.
          * - :py:attr:`~patch_flow_regions`
            - Patch flow regions create patching surfaces for regions identified by dead regions from wrapper patch holes parameters.
          * - :py:attr:`~wrap`
            - Performs wrapping with specified controls in wrapper control and with provided parameters.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter context for Wrapper.
          * - :py:attr:`~__exit__`
            - Exit context for Wrapper.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.wrapper import Wrapper



Method detail
-------------

.. py:method:: __enter__()

   Enter context for Wrapper.


.. py:method:: __exit__(type, value, traceback)

   Exit context for Wrapper.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: close_gaps(scope: ansys.meshing.prime.params.primestructs.ScopeDefinition, params: ansys.meshing.prime.params.primestructs.WrapperCloseGapsParams) -> ansys.meshing.prime.params.primestructs.WrapperCloseGapsResult

   Close gaps create patching surfaces within the face zonelets specified by scope using gap size.


   :param scope: Scope definition of face zonelets.
   :type scope: ScopeDefinition
   :param params: Wrapper close gaps parameters.
   :type params: WrapperCloseGapsParams

   :returns: Returns the WrapperCloseGapsResult.
   :rtype: WrapperCloseGapsResult

   .. rubric:: Examples

   >>> result = wrapper.close_gaps(scope, params)


.. py:method:: improve_quality(part_id: int, params: ansys.meshing.prime.params.primestructs.WrapperImproveQualityParams) -> ansys.meshing.prime.params.primestructs.WrapperImproveResult

   Improve the surface quality and resolve connectivity issues like intersections, multi, free, spikes, point contacts and so on.


   :param part_id: Id of the part.
   :type part_id: int
   :param params: Wrapper improve quality parameters.
   :type params: WrapperImproveQualityParams

   :returns: Return the Wrapper improve result.
   :rtype: WrapperImproveResult

   .. rubric:: Examples

   >>> result = wrapper.improve_quality(part_id, params)


.. py:method:: patch_flow_regions(live_material_point: str, params: ansys.meshing.prime.params.primestructs.WrapperPatchFlowRegionsParams) -> ansys.meshing.prime.params.primestructs.WrapperPatchFlowRegionsResult

   Patch flow regions create patching surfaces for regions identified by dead regions from wrapper patch holes parameters.


   :param live_material_point: Name of live material point.
   :type live_material_point: str
   :param params: Parameters to define patch flow regions operation.
   :type params: WrapperPatchFlowRegionsParams

   :returns: Returns the WrapperPatchFlowRegionsResult.
   :rtype: WrapperPatchFlowRegionsResult

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = wrapper.PatchFlowRegions(live_material_point, params)


.. py:method:: wrap(wrapper_control_id: int, params: ansys.meshing.prime.params.primestructs.WrapParams) -> ansys.meshing.prime.params.primestructs.WrapResult

   Performs wrapping with specified controls in wrapper control and with provided parameters.


   :param wrapper_control_id: Id of wrapper control.
   :type wrapper_control_id: int
   :param params: Wrap Parameters.
   :type params: WrapParams

   :returns: Returns the WrapResult.
   :rtype: WrapResult

   .. rubric:: Examples

   >>> results = wrapper.wrap(wrapper_control_id, params)







.. vale on