.. vale off







:class:`VolumeSweeper`
======================


.. py:class:: ansys.meshing.prime.autogen.volumesweeper.VolumeSweeper(model: ansys.meshing.prime.autogen.coreobject.CommunicationManager, part_id: int)



   VolumeSweeper class provide functions to volume mesh a given set of topovolumes by sweeping or stacking a set of face and edge zonelets. Provide operations to generate volume mesh using stacker technology.

   :param model: Server model to create VolumeSweeper object.
   :type model: Model
   :param part_id: Id of the part.
   :type part_id: int






.. py:currentmodule:: VolumeSweeper

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~create_base_face`
            - Creates a face at the specified origin perpendicular to the specified direction. Also, imprint model edges on the face, make necessary edge repairs, and duplicate relevant size controls on the base face.
          * - :py:attr:`~stack_base_face`
            - Generates volume mesh stacking a meshed face layer by layer along the given direction. Calculates the stack layers using size controls and global size parameters.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter context for VolumeSweeper.
          * - :py:attr:`~__exit__`
            - Exit context for VolumeSweeper.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.volumesweeper import VolumeSweeper



Method detail
-------------

.. py:method:: __enter__()

   Enter context for VolumeSweeper.


.. py:method:: __exit__(type, value, traceback)

   Exit context for VolumeSweeper.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: create_base_face(topo_volume_ids: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.MeshStackerParams) -> ansys.meshing.prime.params.primestructs.MeshStackerResults

   Creates a face at the specified origin perpendicular to the specified direction. Also, imprint model edges on the face, make necessary edge repairs, and duplicate relevant size controls on the base face.


   :param topo_volume_ids: Ids of volumes that need to be meshed.
   :type topo_volume_ids: Iterable[int]
   :param params: Mesh stacker parameters.
   :type params: MeshStackerParams

   :returns: Returns the MeshStackerResults.
   :rtype: MeshStackerResults

   .. rubric:: Examples

   >>> results = volumesweeper.create_base_face(topo_volume_ids, params)


.. py:method:: stack_base_face(base_face_ids: ansys.meshing.prime.params.primestructs.Iterable[int], topo_volume_ids: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.MeshStackerParams) -> ansys.meshing.prime.params.primestructs.MeshStackerResults

   Generates volume mesh stacking a meshed face layer by layer along the given direction. Calculates the stack layers using size controls and global size parameters.


   :param base_face_ids: Ids of base faces to be stacked
   :type base_face_ids: Iterable[int]
   :param topo_volume_ids: Ids of volumes that need to be meshed.
   :type topo_volume_ids: Iterable[int]
   :param params: Mesh stacker parameters.
   :type params: MeshStackerParams

   :returns: Returns the MeshStackerResults.
   :rtype: MeshStackerResults

   .. rubric:: Examples

   >>> results = volumesweeper.stack_base_face(base_face_ids, topo_volume_ids, params)







.. vale on