.. vale off







:class:`ControlData`
====================


.. py:class:: ansys.meshing.prime.autogen.controldata.ControlData(model: ansys.meshing.prime.autogen.coreobject.CommunicationManager, id: int, object_id: int, name: str)



   ControlData has all controls like size controls, prism controls, wrapper controls and more.

   :param model: Server model to create ControlData object.
   :type model: Model
   :param id: Id of the ControlData.
   :type id: int
   :param object_id: Object id of the ControlData.
   :type object_id: int
   :param name: Name of the ControlData.
   :type name: str




.. py:currentmodule:: ControlData

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~create_multi_zone_control`
            - Creates MultiZone control with defaults.
          * - :py:attr:`~create_periodic_control`
            - Creates the periodic control.
          * - :py:attr:`~create_prism_control`
            - Creates the PrismControl.
          * - :py:attr:`~create_shell_bl_control`
            - Creates the ShellBLControl.
          * - :py:attr:`~create_size_control`
            - Creates size control for the given sizing type.
          * - :py:attr:`~create_thin_volume_control`
            - Creates the ThinVolumeControl.
          * - :py:attr:`~create_volume_control`
            - Creates the volume control.
          * - :py:attr:`~create_wrapper_control`
            - Creates wrapper control with defaults.
          * - :py:attr:`~delete_controls`
            - Delete the controls of the given ids.
          * - :py:attr:`~get_multi_zone_controls`
            - Get ids of all the MultiZone controls.
          * - :py:attr:`~get_part_zonelets`
            - Creates an array of part zonelet structure using the input ScopeDefinition.
          * - :py:attr:`~get_scope_face_zonelets`
            - Get the face zonelet ids for the given scope.
          * - :py:attr:`~get_scope_parts`
            - Get the part ids for the given scope.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~id`
            - Get the id of ControlData.
          * - :py:attr:`~name`
            - Get the name of ControlData.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.controldata import ControlData

Property detail
---------------

.. py:property:: id

   Get the id of ControlData.

.. py:property:: name

   Get the name of ControlData.




Method detail
-------------

.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: create_multi_zone_control() -> List[Any]

   Creates MultiZone control with defaults.


   :returns: Returns the MultiZone control.
   :rtype: MultiZoneControl

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> multizone_control = model.control_data.create_multizone_control()


.. py:method:: create_periodic_control() -> List[Any]

   Creates the periodic control.


   :returns: Returns the periodic control.
   :rtype: PeriodicControl

   .. rubric:: Examples

   >>> periodic_control = model.control_data.create_periodic_control()


.. py:method:: create_prism_control() -> List[Any]

   Creates the PrismControl.


   :returns: Returns the PrismControl.
   :rtype: PrismControl

   .. rubric:: Examples

   >>> prism_control = model.control_data.create_prism_control()


.. py:method:: create_shell_bl_control() -> List[Any]

   Creates the ShellBLControl.


   :returns: Returns the ShellBLControl.
   :rtype: ShellBLControl

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> shell_bl_control = model.control_data.create_shell_bl_control()


.. py:method:: create_size_control(type: ansys.meshing.prime.params.primestructs.SizingType) -> List[Any]

   Creates size control for the given sizing type.


   :param type: Sizing type used to create a size control.
   :type type: SizingType

   :returns: Returns the size control.
   :rtype: SizeControl

   .. rubric:: Notes

   An empty size control is created on calling this API.

   .. rubric:: Examples

   >>> size_control = model.control_data.create_size_control(SizingType.CURVATURE)


.. py:method:: create_thin_volume_control() -> List[Any]

   Creates the ThinVolumeControl.


   :returns: Returns the ThinVolumeControl.
   :rtype: ThinVolumeControl

   .. rubric:: Examples

   >>> thin_volume_control = model.control_data.create_thin_volume_control()


.. py:method:: create_volume_control() -> List[Any]

   Creates the volume control.


   :returns: Returns the volume control.
   :rtype: VolumeControl

   .. rubric:: Examples

   >>> volume_control = model.control_data.create_volume_control()


.. py:method:: create_wrapper_control() -> List[Any]

   Creates wrapper control with defaults.


   :returns: Returns the wrapper control.
   :rtype: WrapperControl

   .. rubric:: Notes

   A wrapper control with defaults is created on calling this API.

   .. rubric:: Examples

   >>> wrapper_control = model.control_data.create_wrapper_control()


.. py:method:: delete_controls(control_ids: ansys.meshing.prime.params.primestructs.Iterable[int]) -> ansys.meshing.prime.params.primestructs.DeleteResults

   Delete the controls of the given ids.


   :param control_ids: Ids of controls to be deleted.
   :type control_ids: Iterable[int]

   :returns: Returns the DeleteResults.
   :rtype: DeleteResults

   .. rubric:: Examples

   >>> results = model.control_data.delete_controls([size_control.id, volume_control.id])


.. py:method:: get_multi_zone_controls() -> ansys.meshing.prime.params.primestructs.Iterable[int]

   Get ids of all the MultiZone controls.


   :returns: Return all the MultiZone controls ids.
   :rtype: Iterable[int]

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> MultiZoneControls = model.control_data.get_multi_zone_controls()


.. py:method:: get_part_zonelets(scope: ansys.meshing.prime.params.primestructs.ScopeDefinition) -> List[ansys.meshing.prime.params.primestructs.PartZonelets]

   Creates an array of part zonelet structure using the input ScopeDefinition.


   :param scope: Input ScopeDefinition.
   :type scope: ScopeDefinition

   :returns: Returns a list of PartZonelets.
   :rtype: List[PartZonelets]

   .. rubric:: Examples

   >>> results = control_data.get_part_zonelets(scope)


.. py:method:: get_scope_face_zonelets(scope: ansys.meshing.prime.params.primestructs.ScopeDefinition, params: ansys.meshing.prime.params.primestructs.ScopeZoneletParams) -> ansys.meshing.prime.params.primestructs.Iterable[int]

   Get the face zonelet ids for the given scope.


   :param scope: Scope definition to evaluate entities.
   :type scope: ScopeDefinition
   :param params: Parameters to scope zonelets.
   :type params: ScopeZoneletParams

   :returns: Return the ids of face zonelets.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> face_zonelets = model.control_data.get_scope_face_zonelets(
   >>>                 prime.ScopeDefinition(model = model,
   >>>                 entity_type = prime.ScopeEntity.FACEZONELETS,
   >>>                 part_expression = "*"),
   >>>                 prime.ScopeZoneletParams(model =model))


.. py:method:: get_scope_parts(scope: ansys.meshing.prime.params.primestructs.ScopeDefinition) -> ansys.meshing.prime.params.primestructs.Iterable[int]

   Get the part ids for the given scope.


   :param scope: Scope definition to evaluate the part ids.
   :type scope: ScopeDefinition

   :returns: Return the ids of parts.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> part_ids = model.control_data.get_scope_parts(
   >>>                 prime.ScopeDefinition(model = model,
   >>>                 part_expression = "*"),
   >>>                 prime.ScopeZoneletParams(model =model))







.. vale on