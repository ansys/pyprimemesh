.. vale off







:class:`Model`
==============


.. py:class:: ansys.meshing.prime.autogen.model.Model(comm, id: int, object_id: int, name: str)



   Model is the nucleus of Prime. Model forms the base and contains all the information about Prime.

   You can access any information in Prime only through Model.
   Model allows you to query TopoData, ControlData, Parts, SizeFields and more.

   :param comm: Communicator to connect with the Ansys Prime server.
   :type comm: Communicator
   :param id: Id of the Model.
   :type id: int
   :param object_id: Object id of the Model.
   :type object_id: int
   :param name: Name of the Model.
   :type name: str




.. py:currentmodule:: Model

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~activate_volumetric_size_fields`
            - Activate the sizefields identified by the given sizefield ids.
          * - :py:attr:`~create_zone`
            - Creates zone for the given zone type.
          * - :py:attr:`~deactivate_volumetric_size_fields`
            - Deactivate the size fields with the given size field ids.
          * - :py:attr:`~delete_parts`
            - Delete the parts and its entities.
          * - :py:attr:`~delete_volumetric_size_fields`
            - Delete the sizefields identified by the given sizefield ids.
          * - :py:attr:`~delete_zone`
            - Deletes zone with the given id.
          * - :py:attr:`~get_active_volumetric_size_fields`
            - Get the active sizefield ids.
          * - :py:attr:`~get_num_compute_nodes`
            - Get the number of compute nodes.
          * - :py:attr:`~get_num_threads`
            - Get the number of threads enabled for multithreaded operation.
          * - :py:attr:`~get_size_field_name`
            - Gets the name of size field with the given id.
          * - :py:attr:`~get_volumetric_size_fields`
            - Get the sizefield ids.
          * - :py:attr:`~get_zone_by_name`
            - Gets the zone with the provided name.
          * - :py:attr:`~get_zone_name`
            - Get the name of given zone.
          * - :py:attr:`~merge_parts`
            - Merge given parts into one.
          * - :py:attr:`~set_global_sizing_params`
            - Set the global sizing parameters to initialize surfer parameters and various size control parameters.
          * - :py:attr:`~set_num_threads`
            - Sets the number of threads for multithreaded operation.
          * - :py:attr:`~set_suggested_size_field_name`
            - Sets the suggested name of size field with the given id.
          * - :py:attr:`~set_suggested_zone_name`
            - Sets the unique name for zone with given id based on the suggested name.
          * - :py:attr:`~set_working_directory`
            - Set working directory.
          * - :py:attr:`~start_distributed_meshing`
            - Enables distributed meshing mode.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~id`
            - Get the id of Model.
          * - :py:attr:`~name`
            - Get the name of Model.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.model import Model

Property detail
---------------

.. py:property:: id

   Get the id of Model.

.. py:property:: name

   Get the name of Model.




Method detail
-------------

.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: activate_volumetric_size_fields(size_field_ids: ansys.meshing.prime.params.primestructs.Iterable[int])

   Activate the sizefields identified by the given sizefield ids.


   :param size_field_ids: List of sizefield ids.
   :type size_field_ids: Iterable[int]

   .. rubric:: Examples

   >>> model = client.model
   >>> model.activate_volumetric_size_fields(size_field_ids)


.. py:method:: create_zone(suggested_name: str, type: ansys.meshing.prime.params.primestructs.ZoneType) -> ansys.meshing.prime.params.primestructs.CreateZoneResults

   Creates zone for the given zone type.


   :param suggested_name: Suggested name for the zone to be created.
   :type suggested_name: str
   :param type: Type of the zone to be created.
   :type type: ZoneType

   :returns: Returns the CreateZoneResults.
   :rtype: CreateZoneResults

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> results = model.create_zone("wall", prime.ZoneType.FACE)


.. py:method:: deactivate_volumetric_size_fields(size_field_ids: ansys.meshing.prime.params.primestructs.Iterable[int])

   Deactivate the size fields with the given size field ids.


   :param size_field_ids: List of sizefield ids.
   :type size_field_ids: Iterable[int]

   .. rubric:: Examples

   >>> model = client.model
   >>> model.deactivate_volumetric_size_fields(size_field_ids)


.. py:method:: delete_parts(part_ids: ansys.meshing.prime.params.primestructs.Iterable[int]) -> ansys.meshing.prime.params.primestructs.DeleteResults

   Delete the parts and its entities.


   :param part_ids: Ids of parts to be deleted.
   :type part_ids: Iterable[int]

   :returns: Return the DeleteResults.
   :rtype: DeleteResults

   .. rubric:: Examples

   >>> results = model.delete_parts(part_ids)


.. py:method:: delete_volumetric_size_fields(size_field_ids: ansys.meshing.prime.params.primestructs.Iterable[int])

   Delete the sizefields identified by the given sizefield ids.


   :param size_field_ids: List of sizefield ids.
   :type size_field_ids: Iterable[int]

   .. rubric:: Examples

   >>> model = client.model
   >>> model.delete_volumetric_size_fields(size_field_ids)


.. py:method:: delete_zone(zone_id: int) -> ansys.meshing.prime.params.primestructs.DeleteZoneResults

   Deletes zone with the given id.


   :param zone_id: Id of the zone to be deleted.
   :type zone_id: int

   :returns: Returns the DeleteZoneResults.
   :rtype: DeleteZoneResults

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> results = model.delete_zone(1)


.. py:method:: get_active_volumetric_size_fields() -> ansys.meshing.prime.params.primestructs.Iterable[int]

   Get the active sizefield ids.


   :returns: Return the list of active sizefield ids.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> model = client.model
   >>> active_size_field_ids = model.get_active_volumetric_size_fields()


.. py:method:: get_num_compute_nodes() -> int

   Get the number of compute nodes.


   :returns: Returns the number of compute nodes.
   :rtype: int

   .. rubric:: Examples

   >>> model = client.model
   >>> num_compute_nodes = model.get_num_compute_nodes()


.. py:method:: get_num_threads() -> int

   Get the number of threads enabled for multithreaded operation.


   :returns: Returns the number of threads.
   :rtype: int

   .. rubric:: Examples

   >>> model = client.model
   >>> num_threads = model.get_num_threads()


.. py:method:: get_size_field_name(size_field_id: int) -> str

   Gets the name of size field with the given id.


   :param size_field_id: Size field id.
   :type size_field_id: int

   :returns: Returns the name of the size field.
   :rtype: str

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> model = client.model
   >>> model.get_size_field_name(size_field_id)


.. py:method:: get_volumetric_size_fields() -> ansys.meshing.prime.params.primestructs.Iterable[int]

   Get the sizefield ids.


   :returns: Return the list of sizefield ids.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> model = client.model
   >>> size_field_ids = model.get_volumetric_size_fields()


.. py:method:: get_zone_by_name(zone_name: str) -> int

   Gets the zone with the provided name.


   :param zone_name: Name of the zone.
   :type zone_name: str

   :returns: Returns id of the zone.
   :rtype: int

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> zone_id = model.get_zone_by_name("inlet")


.. py:method:: get_zone_name(id: int) -> str

   Get the name of given zone.


   :param id: Id of zone.
   :type id: int

   :returns: Return the zone name. Return empty name if the id is invalid.
   :rtype: str

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> name = model.get_zone_name(id)


.. py:method:: merge_parts(part_ids: ansys.meshing.prime.params.primestructs.Iterable[int], params: ansys.meshing.prime.params.primestructs.MergePartsParams) -> ansys.meshing.prime.params.primestructs.MergePartsResults

   Merge given parts into one.


   :param part_ids: Ids of parts to be merged.
   :type part_ids: Iterable[int]
   :param params: Parameters to merge parts.
   :type params: MergePartsParams

   :returns: Returns the MergePartsResults.
   :rtype: MergePartsResults

   .. rubric:: Examples

   >>> params = prime.MergePartsParams(model = model)
   >>> results = model.merge_parts(part_ids, params)


.. py:method:: set_global_sizing_params(params: ansys.meshing.prime.params.primestructs.GlobalSizingParams) -> ansys.meshing.prime.params.primestructs.SetSizingResults

   Set the global sizing parameters to initialize surfer parameters and various size control parameters.


   :param params: Global sizing parameters.
   :type params: GlobalSizingParams

   .. rubric:: Examples

   >>> model = client.model
   >>> model.set_global_sizing_params(
   >>>           prime.GlobalSizingParams(model=model,
   >>>           min = 0.1, max = 1.0, growth_rate = 1.2))


.. py:method:: set_num_threads(num: int)

   Sets the number of threads for multithreaded operation.


   :param num: Number of threads.
   :type num: int

   .. rubric:: Examples

   >>> model = client.model
   >>> model.set_num_threads(4)


.. py:method:: set_suggested_size_field_name(size_field_id: int, name: str) -> ansys.meshing.prime.params.primestructs.SetNameResults

   Sets the suggested name of size field with the given id.


   :param size_field_id: Size field id.
   :type size_field_id: int
   :param name: Name of the size field.
   :type name: str

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> model = client.model
   >>> model.set_suggested_size_field_name(size_field_id, name)


.. py:method:: set_suggested_zone_name(id: int, name: str) -> ansys.meshing.prime.params.primestructs.SetNameResults

   Sets the unique name for zone with given id based on the suggested name.


   :param id: Id of the zone to set suggested name.
   :type id: int
   :param name: Suggested name for the zone.
   :type name: str

   :returns: Returns the SetNameResults. results.assignedName indicates the assigned name to the zone.
   :rtype: SetNameResults

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> results = model.set_suggested_zone_name(id = 5, name = "zone1")


.. py:method:: set_working_directory(path: str)

   Set working directory.

   Set working directory to be considered for file i/o when file paths are relative.

   :param path: Path to the directory.
   :type path: str

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> zones = model.set_working_directory("C:/input_files")


.. py:method:: start_distributed_meshing()

   Enables distributed meshing mode.


   .. rubric:: Examples

   >>> client = prime.launch_prime()
   >>> model = client.model
   >>> model.start_distributed_meshing()







.. vale on