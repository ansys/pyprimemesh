.. vale off







:class:`FileIO`
===============


.. py:class:: ansys.meshing.prime.autogen.fileio.FileIO(model: ansys.meshing.prime.autogen.coreobject.CommunicationManager)



   Handles reading or writing files from the disk.

   :param model: Server model to create FileIO object.
   :type model: Model






.. py:currentmodule:: FileIO

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~export_boundary_fitted_spline_kfile`
            - Exports IGA LS-DYNA Keyword file for boundary fitted spline.
          * - :py:attr:`~export_fluent_case`
            - Exports Fluent case file. Fluent case files have cas extension.
          * - :py:attr:`~export_fluent_meshing_mesh`
            - Exports Fluent Meshing mesh file. Fluent Meshing mesh files have .msh extension.
          * - :py:attr:`~export_lsdyna_iga_keyword_file`
            - Exports IGA LS-DYNA Keyword file for solid, surface splines, or both.
          * - :py:attr:`~export_lsdyna_keyword_file`
            - Export FEA LS-DYNA Keyword file for solid, surface mesh or both.
          * - :py:attr:`~export_mapdl_cdb`
            - Function that exports MAPDL CDB file(cdb).
          * - :py:attr:`~export_stl`
            - Exports STL file.
          * - :py:attr:`~get_abaqus_simulation_data`
            - Gets simulation document generated by Abaqus import for a given part.
          * - :py:attr:`~import_abaqus_inp`
            - Import a Abaqus file.
          * - :py:attr:`~import_cad`
            - Imports CAD file from disk.
          * - :py:attr:`~import_fluent_case`
            - Imports fluent case file on disk.
          * - :py:attr:`~import_fluent_meshing_meshes`
            - Imports fluent meshing meshes of given files on disk.
          * - :py:attr:`~import_fluent_meshing_size_field`
            - Imports Fluent-Meshing's size field file from disk.
          * - :py:attr:`~import_mapdl_cdb`
            - Function that imports MAPDL CDB file(cdb).
          * - :py:attr:`~read_pmdat`
            - Function that reads PRIME's database file.
          * - :py:attr:`~read_size_field`
            - Read PRIME's sizefield file from disk.
          * - :py:attr:`~write_pmdat`
            - Writes Prime mesh data file. Prime mesh data files have .pmdat extension.
          * - :py:attr:`~write_size_field`
            - Write PRIME's sizefield (.psf) to file.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter context for FileIO.
          * - :py:attr:`~__exit__`
            - Exit context for FileIO.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.autogen.fileio import FileIO



Method detail
-------------

.. py:method:: __enter__()

   Enter context for FileIO.


.. py:method:: __exit__(type, value, traceback)

   Exit context for FileIO.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: export_boundary_fitted_spline_kfile(file_name: str, export_params: ansys.meshing.prime.params.primestructs.ExportBoundaryFittedSplineParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Exports IGA LS-DYNA Keyword file for boundary fitted spline.


   :param file_name: Name of the file.
   :type file_name: str
   :param export_params: Parameters for IGA LS-DYNA Keyword file export.
   :type export_params: ExportBoundaryFittedSplineParams

   :returns: Returns FileWriteResults.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.export_boundary_fitted_spline_k_file(file_name, ExportBoundaryFittedSplineParams(model = model))


.. py:method:: export_fluent_case(file_name: str, export_fluent_case_params: ansys.meshing.prime.params.primestructs.ExportFluentCaseParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Exports Fluent case file. Fluent case files have cas extension.


   :param file_name: Path to file on disk.
   :type file_name: str
   :param export_fluent_case_params: Parameters to export fluent case file.
   :type export_fluent_case_params: ExportFluentCaseParams

   :returns: Returns the FileWriteResults structure.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> file_io = FileIO(model = model)
   >>> results = file_io.export_fluent_case("/tmp/fluent.cas", prime.ExportFluentCaseParams(model = model))


.. py:method:: export_fluent_meshing_mesh(file_name: str, export_fluent_mesh_params: ansys.meshing.prime.params.primestructs.ExportFluentMeshingMeshParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Exports Fluent Meshing mesh file. Fluent Meshing mesh files have .msh extension.


   :param file_name: Path to file on disk.
   :type file_name: str
   :param export_fluent_mesh_params: Parameters to export Fluent Meshing mesh file.
   :type export_fluent_mesh_params: ExportFluentMeshingMeshParams

   :returns: Returns the FileWriteResults structure.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.export_fluent_meshing_mesh("/tmp/fluent_meshing.msh", ExportFluentMeshingMeshParams(model = model))


.. py:method:: export_lsdyna_iga_keyword_file(file_name: str, export_params: ansys.meshing.prime.params.primestructs.ExportLSDynaIgaKeywordFileParams) -> ansys.meshing.prime.params.primestructs.ExportLSDynaIGAResults

   Exports IGA LS-DYNA Keyword file for solid, surface splines, or both.


   :param file_name: Name of the file.
   :type file_name: str
   :param export_params: Parameters for IGA LS-DYNA Keyword file export.
   :type export_params: ExportLSDynaIgaKeywordFileParams

   :returns: Returns FileWriteResults.
   :rtype: ExportLSDynaIGAResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = file_io.export_lsdyna_iga_keyword_file(file_name, ExportLSDynaIgaKeywordFileParams(model = model))


.. py:method:: export_lsdyna_keyword_file(file_name: str, export_params: ansys.meshing.prime.params.primestructs.ExportLSDynaKeywordFileParams) -> ansys.meshing.prime.params.primestructs.ExportLSDynaResults

   Export FEA LS-DYNA Keyword file for solid, surface mesh or both.


   :param file_name: Name of the file.
   :type file_name: str
   :param export_params: Parameters for FEA LS-DYNA Keyword file export.
   :type export_params: ExportLSDynaKeywordFileParams

   :returns: Returns FileWriteResults.
   :rtype: ExportLSDynaResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = file_io.export_lsdyna_keyword_file(file_name, ExportLSDynaKeywordFileParams(model = model))


.. py:method:: export_mapdl_cdb(file_name: str, params: ansys.meshing.prime.params.primestructs.ExportMapdlCdbParams) -> ansys.meshing.prime.params.primestructs.ExportMapdlCdbResults

   Function that exports MAPDL CDB file(cdb).


   :param file_name: Path to file on disk.
   :type file_name: str
   :param params: Parameter to export a CDB file.
   :type params: ExportMapdlCdbParams

   :returns: Returns ExportMapdlCdbResults.
   :rtype: ExportMapdlCdbResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> #connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ExportMapdlCdbParams(model = model)
   >>> results = file_io.export_mapdl_cdb("/tmp/file.cdb", params)


.. py:method:: export_stl(file_name: str, params: ansys.meshing.prime.params.primestructs.ExportSTLParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Exports STL file.


   :param file_name: Path to file on disk.
   :type file_name: str
   :param params: Parameters for writing the file.
   :type params: ExportSTLParams

   :returns: Returns the FileWriteResults.
   :rtype: FileWriteResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> fileio = prime.FileIO(model=model)
   >>> out_file_path = r"/tmp/output.stl"
   >>> part_ids = [part.id for part in model.parts]
   >>> export_stl_params=prime.ExportSTLParams(model=model,part_ids=part_ids)
   >>> results = fileio.export_stl(out_file_path,export_stl_params)


.. py:method:: get_abaqus_simulation_data(partId: int) -> str

   Gets simulation document generated by Abaqus import for a given part.

   This method will return the JSON Simulation Document for a part if the part exists. Otherwise,
   it returns an empty string.

   :param partId: Part Id.
   :type partId: int

   :returns: Returns the string containing a JSON document for simulation data.
   :rtype: str

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> import json
   >>> simdata = json.loads(file_io.get_abaqus_simulation_data(2)


.. py:method:: import_abaqus_inp(file_name: str, params: ansys.meshing.prime.params.primestructs.ImportAbaqusParams) -> ansys.meshing.prime.params.primestructs.ImportAbaqusResults

   Import a Abaqus file.

   Import abaqus files as dead mesh and also store simulation-specific information into Prime in the form of JSON documents.

   :param file_name: Name of file to import.
   :type file_name: str
   :param params: Parameters to specify options during import.
   :type params: ImportAbaqusParams

   :returns: Returns the results of the abaqus database import.
   :rtype: ImportAbaqusResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = file_io.import_abaqus_inp(r"/tmp/file.inp")


.. py:method:: import_cad(file_name: str, import_cad_params: ansys.meshing.prime.params.primestructs.ImportCadParams) -> ansys.meshing.prime.params.primestructs.ImportCadResults

   Imports CAD file from disk.


   :param file_name: Path to file on disk.
   :type file_name: str
   :param import_cad_params: Parameters to control CAD import options.
   :type import_cad_params: ImportCadParams

   :returns: Returns the ImportCadResults.
   :rtype: ImportCadResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ImportCadParams(model = model)
   >>> results = file_io.import_cad(file_name="/tmp/my_cad.x_t", import_cad_params=params)


.. py:method:: import_fluent_case(file_name: str, import_fluent_case_params: ansys.meshing.prime.params.primestructs.ImportFluentCaseParams) -> ansys.meshing.prime.params.primestructs.ImportFluentCaseResults

   Imports fluent case file on disk.

   Fluent case files have cas extension.

   :param file_name: Path to file on disk.
   :type file_name: str
   :param import_fluent_case_params: Parameters to import fluent case file.
   :type import_fluent_case_params: ImportFluentCaseParams

   :returns: Returns the ImportFluentCaseResults.
   :rtype: ImportFluentCaseResults

   .. rubric:: Notes

   This API does not support unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ImportFluentCaseParams(model = model)
   >>> results = file_io.import_fluent_case("/tmp/fluent.cas", params)


.. py:method:: import_fluent_meshing_meshes(file_names: List[str], import_fluent_meshing_mesh_params: ansys.meshing.prime.params.primestructs.ImportFluentMeshingMeshParams) -> ansys.meshing.prime.params.primestructs.ImportFluentMeshingMeshResults

   Imports fluent meshing meshes of given files on disk.

   Fluent Meshing mesh files have msh and msh.gz extension.

   :param file_names: Full path of files to be imported.
   :type file_names: List[str]
   :param import_fluent_meshing_mesh_params: Parameters to import fluent meshing mesh.
   :type import_fluent_meshing_mesh_params: ImportFluentMeshingMeshParams

   :returns: Returns the FileReadResults.
   :rtype: ImportFluentMeshingMeshResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ImportFluentMeshingMeshParams(model = model)
   >>> results = file_io.import_fluent_meshing_meshes(["/tmp/mesh.msh", "/tmp/mesh1.msh"], params)


.. py:method:: import_fluent_meshing_size_field(file_name: str) -> ansys.meshing.prime.params.primestructs.SizeFieldFileReadResults

   Imports Fluent-Meshing's size field file from disk.

   Fluent-Meshing's sizefield files have sf and sf.gz extension.

   :param file_name: Path to file on disk
   :type file_name: str

   :returns: Return the SizeFieldFileReadResults.
   :rtype: SizeFieldFileReadResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> results = file_io.import_fluent_meshing_size_field("/tmp/my_sizefield.sf")


.. py:method:: import_mapdl_cdb(file_name: str, params: ansys.meshing.prime.params.primestructs.ImportMapdlCdbParams) -> ansys.meshing.prime.params.primestructs.ImportMapdlCdbResults

   Function that imports MAPDL CDB file(cdb).


   :param file_name: Path to file on disk.
   :type file_name: str
   :param params: Parameter to import a CDB file.
   :type params: ImportMapdlCdbParams

   :returns: Returns ImportMapdlCdbResults.
   :rtype: ImportMapdlCdbResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> #connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ImportMapdlCdbParams(model = model)
   >>> results = file_io.import_mapdl_cdb("/tmp/file.cdb", params)


.. py:method:: read_pmdat(file_name: str, file_read_params: ansys.meshing.prime.params.primestructs.FileReadParams) -> ansys.meshing.prime.params.primestructs.FileReadResults

   Function that reads PRIME's database file.

   PRIME's database files have pmdat extension.

   :param file_name: Path to file on disk.
   :type file_name: str
   :param file_read_params: Parameter to read a file.
   :type file_read_params: FileReadParams

   :returns: Returns FileReadResults.
   :rtype: FileReadResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> #connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model = model)
   >>> file_read_params = prime.FileReadParams(model = model)
   >>> results = file_io.read_pmdat("/tmp/file.pmdat", file_read_params)


.. py:method:: read_size_field(file_name: str, params: ansys.meshing.prime.params.primestructs.ReadSizeFieldParams) -> ansys.meshing.prime.params.primestructs.SizeFieldFileReadResults

   Read PRIME's sizefield file from disk.

   PRIME's sizefield files have psf and psf.gz extension.

   :param file_name: Path to file on disk.
   :type file_name: str
   :param params: Parameters to read size field file.
   :type params: ReadSizeFieldParams

   :returns: Return the SizeFieldFileReadResults.
   :rtype: SizeFieldFileReadResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.ReadSizeFieldParams(model = model)
   >>> results = file_io.read_size_field("/tmp/my_prime_sizefield.psf", params)


.. py:method:: write_pmdat(file_name: str, file_write_params: ansys.meshing.prime.params.primestructs.FileWriteParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Writes Prime mesh data file. Prime mesh data files have .pmdat extension.


   :param file_name: Path to write file on disk.
   :type file_name: str
   :param file_write_params: Parameters to write Prime mesh data file.
   :type file_write_params: FileWriteParams

   :returns: Returns the FileWriteResults structure.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.write_pmdat("/tmp/prime_mesh_data.pmdat", prime.FileWriteParams(model = model))


.. py:method:: write_size_field(file_name: str, params: ansys.meshing.prime.params.primestructs.WriteSizeFieldParams) -> ansys.meshing.prime.params.primestructs.FileWriteResults

   Write PRIME's sizefield (.psf) to file.


   :param file_name: Path to file on disk.
   :type file_name: str
   :param params: Parameters to write size field file.
   :type params: WriteSizeFieldParams

   :returns: Return the FileWriteResults.
   :rtype: FileWriteResults

   .. rubric:: Notes

   This API does not support Unicode paths now.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model = model)
   >>> params = prime.WriteSizeFieldParams(model = model)
   >>> results = file_io.write_size_field("/tmp/my_prime_sizefield.psf", params)







.. vale on