.. vale off







:class:`SurfaceScope`
=====================


.. py:class:: ansys.meshing.prime.lucid.SurfaceScope(part_expression: str = '*', entity_expression: str = '*', scope_evaluation_type: ansys.meshing.prime.autogen.controlstructs.ScopeEvaluationType = ScopeEvaluationType.LABELS)



   SurfaceScope is one of the classes in Lucid API.

   This class is meant for beginners to meshing. This class is used to define
   a scope for operation on surfaces.





.. py:currentmodule:: SurfaceScope

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~get_face_zonelets`
            - Get the list of face zonelets for the given part in the scope.
          * - :py:attr:`~get_parts`
            - Get the list of part ids in the scope.
          * - :py:attr:`~get_scope_definition`
            - Get the scope definition of the scope.
          * - :py:attr:`~get_topo_faces`
            - Get the list of topofaces for the given part in the scope.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - 




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.lucid import SurfaceScope



Method detail
-------------

.. py:method:: __str__() -> str

.. py:method:: get_face_zonelets(model: ansys.meshing.prime.core.model.Model, part_id: int) -> Iterable[int]

   Get the list of face zonelets for the given part in the scope.

   :param model: PyPrimeMesh model.
   :type model: Model
   :param part_id: Id of the part.
   :type part_id: int

   :returns: Returns the list of zonelets.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> from ansys.meshing.prime import Model, SurfaceScope
   >>> model = client.model
   >>> su = SurfaceScope("*", "*", prime.ScopeEvaluationType.LABELS)
   >>> face_zonelets = su.get_face_zonelets(model, 2)


.. py:method:: get_parts(model: ansys.meshing.prime.core.model.Model) -> Iterable[int]

   Get the list of part ids in the scope.

   :param model: PyPrimeMesh model.
   :type model: Model

   :returns: Returns the list of part ids.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> from ansys.meshing.prime import Model, SurfaceScope
   >>> model = client.model
   >>> su = SurfaceScope("*", "*", prime.ScopeEvaluationType.LABELS)
   >>> part_ids = su.get_parts()


.. py:method:: get_scope_definition(model: ansys.meshing.prime.core.model.Model) -> ansys.meshing.prime.autogen.controlstructs.ScopeDefinition

   Get the scope definition of the scope.

   :param model: PyPrimeMesh model.
   :type model: Model

   :returns: Returns the scope definition.
   :rtype: ScopeDefinition


.. py:method:: get_topo_faces(model: ansys.meshing.prime.core.model.Model, part_id: int) -> Iterable[int]

   Get the list of topofaces for the given part in the scope.

   :param model: PyPrimeMesh model.
   :type model: Model
   :param part_id: Id of the part.
   :type part_id: int

   :returns: Returns the list of zonelets.
   :rtype: Iterable[int]

   .. rubric:: Examples

   >>> from ansys.meshing.prime import Model, SurfaceScope
   >>> model = client.model
   >>> su = SurfaceScope("*", "*", prime.ScopeEvaluationType.LABELS)
   >>> topo_faces = su.get_topo_faces(model, 2)







.. vale on