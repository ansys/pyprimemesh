.. vale off







:class:`FileIO`
===============


.. py:class:: ansys.meshing.prime.core.fileio.FileIO(model: ansys.meshing.prime.core.model.Model)



   Handles reading or writing files from the disk.

   :param model: Server model to create FileIO object.
   :type model: Model






.. py:currentmodule:: FileIO

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~export_boundary_fitted_spline_kfile`
            - Export the IGA LS-DYNA keyword file for a boundary fitted spline.
          * - :py:attr:`~export_fluent_case`
            - Export a Fluent case (CAS) file.
          * - :py:attr:`~export_fluent_meshing_mesh`
            - Export a Fluent Meshing mesh (MSH) file.
          * - :py:attr:`~export_lsdyna_iga_keyword_file`
            - Export IGA LS-DYNA Keyword file for solid, surface splines.
          * - :py:attr:`~export_lsdyna_keyword_file`
            - Export FEA LS-DYNA Keyword file for solid, surface mesh, or both.
          * - :py:attr:`~export_mapdl_cdb`
            - Export an MAPDL CDB file.
          * - :py:attr:`~export_stl`
            - Export an STL file.
          * - :py:attr:`~get_abaqus_simulation_data`
            - Gets simulation document generated by Abaqus import for a given part.
          * - :py:attr:`~import_abaqus_inp`
            - (BETA FEATURE) Import a Abaqus file.
          * - :py:attr:`~import_cad`
            - Import a CAD file from disk.
          * - :py:attr:`~import_fluent_case`
            - Import a Fluent case (CAS) file from disk.
          * - :py:attr:`~import_fluent_meshing_meshes`
            - Import Fluent Meshing's mesh (MS and MSH.GZ) files from disk.
          * - :py:attr:`~import_fluent_meshing_size_field`
            - Import a Fluent Meshing size field (SF and SF.GZ) file from disk.
          * - :py:attr:`~import_mapdl_cdb`
            - Import an MAPDL CDB file.
          * - :py:attr:`~initialize_cdb_export_params`
            - Initialize specific CDB export parameters based on the given version.
          * - :py:attr:`~read_pmdat`
            - Read a PyPrimeMesh data (PMDAT) file.
          * - :py:attr:`~read_size_field`
            - Read a PyPrimeMesh size field (PSF and PSF.GZ) file from disk.
          * - :py:attr:`~write_pmdat`
            - Write a PyPrimeMesh data (PMDAT) file.
          * - :py:attr:`~write_size_field`
            - Write a PyPrimeMesh size field (PSF) file to a file on disk.



   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__doc__`
            - 



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter context for FileIO.
          * - :py:attr:`~__exit__`
            - Exit context for FileIO.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.core.fileio import FileIO


Attribute detail
----------------

.. py:attribute:: __doc__
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """Handles reading or writing files from the disk.
      
          Parameters
          ----------
          model : Model
              Server model to create FileIO object.
          """

   .. raw:: html

      </details>





Method detail
-------------

.. py:method:: __enter__()

   Enter context for FileIO.


.. py:method:: __exit__(type, value, traceback)

   Exit context for FileIO.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: export_boundary_fitted_spline_kfile(file_name: str, export_params: ansys.meshing.prime.autogen.fileiostructs.ExportBoundaryFittedSplineParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Export the IGA LS-DYNA keyword file for a boundary fitted spline.

   :param file_name: Name of the keyword file.
   :type file_name: str
   :param export_params: Parameters for exporting the keyword file.
   :type export_params: ExportBoundaryFittedSplineParams

   :returns: Results from exporting the keyword file.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.export_boundary_fitted_spline_k_file(
                   file_name,
                   ExportBoundaryFittedSplineParams(model=model))


.. py:method:: export_fluent_case(file_name: str, export_fluent_case_params: ansys.meshing.prime.autogen.fileiostructs.ExportFluentCaseParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Export a Fluent case (CAS) file.

   :param file_name: Path to the case file on disk.
   :type file_name: str
   :param export_fluent_case_params: Parameters for exporting the case file.
   :type export_fluent_case_params: ExportFluentCaseParams

   :returns: Results from exporting the case file.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> file_io = FileIO(model=model)
   >>> results = file_io.export_fluent_case(
                   "/tmp/fluent.cas",
                   prime.ExportFluentCaseParams(model=model))


.. py:method:: export_fluent_meshing_mesh(file_name: str, export_fluent_mesh_params: ansys.meshing.prime.autogen.fileiostructs.ExportFluentMeshingMeshParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Export a Fluent Meshing mesh (MSH) file.

   :param file_name: Path to the mesh file on disk.
   :type file_name: str
   :param export_fluent_mesh_params: Parameters for exporting the mesh file.
   :type export_fluent_mesh_params: ExportFluentMeshingMeshParams

   :returns: Results from exporting the mesh file.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.export_fluent_meshing_mesh(
                   "/tmp/fluent_meshing.msh",
                   ExportFluentMeshingMeshParams(model=model))


.. py:method:: export_lsdyna_iga_keyword_file(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ExportLSDynaIgaKeywordFileParams) -> ansys.meshing.prime.autogen.fileiostructs.ExportLSDynaIGAResults

   Export IGA LS-DYNA Keyword file for solid, surface splines.

   :param file_name: Name of the file.
   :type file_name: str
   :param params: Parameters for IGA LS-DYNA Keyword file export.
   :type params: ExportLSDynaIgaKeywordFileParams

   :returns: Returns ExportLSDynaIGAResults.
   :rtype: ExportLSDynaIGAResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = file_io.export_lsdyna_iga_keyword_file(
       file_name, ExportLSDynaIgaKeywordFileParams(model=model)
   )


.. py:method:: export_lsdyna_keyword_file(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ExportLSDynaKeywordFileParams) -> ansys.meshing.prime.autogen.fileiostructs.ExportLSDynaResults

   Export FEA LS-DYNA Keyword file for solid, surface mesh, or both.

   :param file_name: Name of the file.
   :type file_name: str
   :param params: Parameters for FEA LS-DYNA Keyword file export.
   :type params: ExportLSDynaKeywordFileParams

   :returns: Returns ExportLSDynaResults.
   :rtype: ExportLSDynaResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = file_io.export_lsdyna_keyword_file(
       file_name, ExportLSDynaKeywordFileParams(model=model)
   )


.. py:method:: export_mapdl_cdb(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ExportMapdlCdbParams) -> ansys.meshing.prime.autogen.fileiostructs.ExportMapdlCdbResults

   Export an MAPDL CDB file.

   :param file_name: Path to the CDB file on disk.
   :type file_name: str
   :param params: Parameters for exporting the CDB file.
   :type params: ExportMapdlCdbParams

   :returns: Results from exporting the CDB file.
   :rtype: ExportMapdlCdbResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> #connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ExportMapdlCdbParams(model=model)
   >>> results = file_io.export_mapdl_cdb("/tmp/file.cdb", params)


.. py:method:: export_stl(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ExportSTLParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Export an STL file.

   :param file_name: Path to the STL file on disk.
   :type file_name: str
   :param params: Parameters for exporting the STL file.
   :type params: ExportSTLParams

   :returns: Results from exporting the STL file.
   :rtype: FileWriteResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> model = prime.launch_prime().model
   >>> fileio = prime.FileIO(model=model)
   >>> out_file_path = r"/tmp/output.stl"
   >>> part_ids = [part.id for part in model.parts]
   >>> export_stl_params=prime.ExportSTLParams(model=model,part_ids=part_ids)
   >>> results = fileio.export_stl(out_file_path,export_stl_params)


.. py:method:: get_abaqus_simulation_data(partId: int) -> str

   Gets simulation document generated by Abaqus import for a given part.

   This method will return the JSON Simulation Document for a part if the part exists. Otherwise,
   it returns an empty string.

   :param partId: Part Id.
   :type partId: int

   :returns: Returns the string containing a JSON document for simulation data.
   :rtype: str

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> import json
   >>> simdata = json.loads(file_io.get_abaqus_simulation_data(2)


.. py:method:: import_abaqus_inp(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ImportAbaqusParams) -> ansys.meshing.prime.autogen.fileiostructs.ImportAbaqusResults

   (BETA FEATURE) Import a Abaqus file.

   This is a beta feature to import abaqus files as dead mesh and also store
   simulation-specific information into Prime in the form of JSON documents.

   :param file_name: Name of file to import.
   :type file_name: str
   :param params: Parameters to specify options during import.
   :type params: ImportAbaqusParams

   :returns: Returns the results of the abaqus database import.
   :rtype: ImportAbaqusResults

   .. rubric:: Examples

   >>> results = file_io.import_abaqus(r"/tmp/file.inp")


.. py:method:: import_cad(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ImportCadParams) -> ansys.meshing.prime.autogen.fileiostructs.ImportCadResults

   Import a CAD file from disk.

   Supported CAD file formats on Windows are:

   \*.scdoc \*.scdocx \*.dsco \*.fmd \*.agdb \*.pmdb \*.meshdat \*.mechdat \*.dsdb \*.cmdb
   \*.sat \*.sab \*.dwg \*.dxf \*.model \*.exp \*.CATPart \*.CATProduct \*.cgr \*.3dxml
   \*.prt\* \*.asm\* \*.iges \*.igs \*.ipt \*.iam \*.jt \*.prt \*.x_t \*.x_b \*.par \*.psm
   \*.asm \*.sldprt \*.sldasm \*.step \*.stp \*.stl \*.plmxml \*.tgf

   Supported CAD file formats on Linux are:

   \*.fmd \*.agdb \*.pmdb \*.meshdat \*.mechdat \*.dsdb \*.cmdb \*.sat \*.sab
   \*.CATPart \*.CATProduct \*.iges \*.igs \*.jt \*.x_t \*.x_b \*.step \*.stp
   \*.stl \*.plmxml \*.tgf

   Refer **Reading and writing files** section in **User guide** for a
   comprehensive list of supported formats.

   :param file_name: Path to the CAD file on disk.
   :type file_name: str
   :param params: Parameters for importing the CAD file.
   :type params: ImportCadParams

   :returns: Results from importing the CAD file.
   :rtype: ImportCadResults

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> prime_client = prime.launch_prime()
   >>> model = prime_client.model
   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ImportCadParams(model=model)
   >>> results = file_io.import_cad("/tmp/my_cad.x_t", params=params)


.. py:method:: import_fluent_case(file_name: str, import_fluent_case_params: ansys.meshing.prime.autogen.fileiostructs.ImportFluentCaseParams) -> ansys.meshing.prime.autogen.fileiostructs.ImportFluentCaseResults

   Import a Fluent case (CAS) file from disk.

   :param file_name: Path to the case file on disk.
   :type file_name: str
   :param import_fluent_case_params: Parameters for importing the case file.
   :type import_fluent_case_params: ImportFluentCaseParams

   :returns: Results from importing the case file.
   :rtype: ImportFluentCaseResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ImportFluentCaseParams(model=model)
   >>> results = file_io.import_fluent_case("/tmp/fluent.cas", params)


.. py:method:: import_fluent_meshing_meshes(file_names: List[str], import_fluent_meshing_mesh_params: ansys.meshing.prime.autogen.fileiostructs.ImportFluentMeshingMeshParams) -> ansys.meshing.prime.autogen.fileiostructs.ImportFluentMeshingMeshResults

   Import Fluent Meshing's mesh (MS and MSH.GZ) files from disk.

   :param file_names: List of full path for the mesh files to import.
   :type file_names: List[str]
   :param import_fluent_meshing_mesh_params: Parameters for importing the mesh files.
   :type import_fluent_meshing_mesh_params: ImportFluentMeshingMeshParams

   :returns: Results from importing the mesh files.
   :rtype: ImportFluentMeshingMeshResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ImportFluentMeshingMeshParams(model=model)
   >>> results = file_io.import_fluent_meshing_meshes(
                   ["/tmp/mesh.msh", "/tmp/mesh1.msh"],
                   params)


.. py:method:: import_fluent_meshing_size_field(file_name: str) -> ansys.meshing.prime.autogen.fileiostructs.SizeFieldFileReadResults

   Import a Fluent Meshing size field (SF and SF.GZ) file from disk.

   :param file_name: Path to the size field file on disk.
   :type file_name: str

   :returns: Results from reading the size field file.
   :rtype: SizeFieldFileReadResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> results = file_io.import_fluent_meshing_size_field("/tmp/my_sizefield.sf")


.. py:method:: import_mapdl_cdb(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ImportMapdlCdbParams) -> ansys.meshing.prime.autogen.fileiostructs.ImportMapdlCdbResults

   Import an MAPDL CDB file.

   :param file_name: Path to the CDB file on disk.
   :type file_name: str
   :param params: Parameters for importing the CDB file.
   :type params: ImportMapdlCdbParams

   :returns: Results from importing the CDB file.
   :rtype: ImportMapdlCdbResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> # connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ImportMapdlCdbParams(model=model)
   >>> results = file_io.import_mapdl_cdb("/tmp/file.cdb", params)


.. py:method:: initialize_cdb_export_params(params: ansys.meshing.prime.autogen.fileiostructs.ExportMapdlCdbParams, major_version: int, minor_version: int) -> ansys.meshing.prime.autogen.fileiostructs.ExportMapdlCdbParams

   Initialize specific CDB export parameters based on the given version.

   This function sets the separate_blocks_format_type, export_fasteners_as_swgen and
   export_rigid_bodies_as_rbgen parameters of the provided ExportMapdlCdbParams
   object based on the given major and minor version numbers.
   Other parameters remain unchanged.

   :param params: The CDB export parameters object to be modified.
   :type params: ExportMapdlCdbParams
   :param major_version: The major version number.
   :type major_version: int
   :param minor_version: The minor version number.
   :type minor_version: int

   :returns: The modified CDB export parameters object.
   :rtype: ExportMapdlCdbParams

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   The version is formed as "<major_version>r<minor_version>", e.g., "24r1", "25r2".
   If the version is greater than or equal to "25r1", write_separate_blocks is set to True
   with COMPACT format, and export_fasteners_as_swgen and export_rigid_bodies_as_rbgen
   parameters are set to True. Otherwise, they are set to False.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ExportMapdlCdbParams()
   >>> params = file_io.initialize_cdb_export_params(params, 24, 1)
   >>> params.write_separate_blocks
   False
   >>> params.export_fasteners_as_swgen
   False
   >>> params.export_rigid_bodies_as_swgen
   False

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ExportMapdlCdbParams()
   >>> params = file_io.initialize_cdb_export_params(params, 25, 2)
   >>> params.write_separate_blocks
   True
   >>> params.separate_blocks_format_type
   SeparateBlocksFormatType.COMPACT
   >>> params.export_fasteners_as_swgen
   True
   >>> params.export_rigid_bodies_as_swgen
   True


.. py:method:: read_pmdat(file_name: str, file_read_params: ansys.meshing.prime.autogen.fileiostructs.FileReadParams) -> ansys.meshing.prime.autogen.fileiostructs.FileReadResults

   Read a PyPrimeMesh data (PMDAT) file.

   :param file_name: Path to the data file on disk.
   :type file_name: str
   :param file_read_params: Parameters for reading the data file.
   :type file_read_params: FileReadParams

   :returns: Results from reading the data file.
   :rtype: FileReadResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> import ansys.meshing.prime as prime
   >>> #connect client to server and get model from it
   >>> client = prime.Client(ip="localhost", port=50060)
   >>> model = client.model
   >>> file_io = prime.FileIO(model=model)
   >>> file_read_params = prime.FileReadParams(model=model)
   >>> results = file_io.read_pmdat("/tmp/file.pmdat", file_read_params)


.. py:method:: read_size_field(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.ReadSizeFieldParams) -> ansys.meshing.prime.autogen.fileiostructs.SizeFieldFileReadResults

   Read a PyPrimeMesh size field (PSF and PSF.GZ) file from disk.

   :param file_name: Path to the size field file on disk.
   :type file_name: str
   :param params: Parameters for reading size field file.
   :type params: ReadSizeFieldParams

   :returns: Results from reading the size field file.
   :rtype: SizeFieldFileReadResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.ReadSizeFieldParams(model=model)
   >>> results = file_io.read_size_field("/tmp/my_prime_sizefield.psf", params)


.. py:method:: write_pmdat(file_name: str, file_write_params: ansys.meshing.prime.autogen.fileiostructs.FileWriteParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Write a PyPrimeMesh data (PMDAT) file.

   :param file_name: Path for writing the data file on disk.
   :type file_name: str
   :param file_write_params: Parameters for writing the data file.
   :type file_write_params: FileWriteParams

   :returns: Results from writing the data file.
   :rtype: FileWriteResults

   .. rubric:: Examples

   >>> results = file_io.write_pmdat("/tmp/prime_mesh_data.pmdat",
                                     prime.FileWriteParams(model=model))


.. py:method:: write_size_field(file_name: str, params: ansys.meshing.prime.autogen.fileiostructs.WriteSizeFieldParams) -> ansys.meshing.prime.autogen.fileiostructs.FileWriteResults

   Write a PyPrimeMesh size field (PSF) file to a file on disk.

   :param file_name: Path to the size field file on disk.
   :type file_name: str
   :param params: Parameters for writing the size field file.
   :type params: WriteSizeFieldParams

   :returns: Results from writing the size field file.
   :rtype: FileWriteResults

   .. rubric:: Notes

   This method does not support Unicode paths.

   .. rubric:: Examples

   >>> file_io = prime.FileIO(model=model)
   >>> params = prime.WriteSizeFieldParams(model=model)
   >>> results = file_io.write_size_field("/tmp/my_prime_sizefield.psf", params)







.. vale on