.. vale off







:class:`Surfer`
===============


.. py:class:: ansys.meshing.prime.core.surfer.Surfer(model: ansys.meshing.prime.core.model.Model)



   Generates surface mesh.

   Performs surface meshing using various surface meshing algorithms on topofaces or face zonelets.
   For example, constant size or volumetric size surface meshing.

   :param model: Server model to create Surfer object.
   :type model: Model






.. py:currentmodule:: Surfer

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~create_shell_bl_using_controls`
            - Create ShellBL using data stored in controls.
          * - :py:attr:`~initialize_surfer_params_for_wrapper`
            - Initialize surfer parameters to mesh surfaces generated by the wrapper.
          * - :py:attr:`~mesh_topo_faces`
            - Perform meshing on TopoFaces with given parameters.
          * - :py:attr:`~remesh_face_zonelets`
            - Perform meshing on face zonelets with given parameters.
          * - :py:attr:`~remesh_face_zonelets_locally`
            - Remesh face zonelets locally at the registered faces with given parameters.



   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__doc__`
            - 



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Run initializing context manager.
          * - :py:attr:`~__exit__`
            - Run when closing the context manager.
          * - :py:attr:`~__setattr__`
            - __setattr__(CoreObject self, key, value)




Import detail
-------------

.. code-block:: python

    from ansys.meshing.prime.core.surfer import Surfer


Attribute detail
----------------

.. py:attribute:: __doc__
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """Generates surface mesh.
      
          Performs surface meshing using various surface meshing algorithms on topofaces or face zonelets.
          For example, constant size or volumetric size surface meshing.
      
          Parameters
          ----------
          model : Model
              Server model to create Surfer object.
          part_id : int
              Id of the part.
          """

   .. raw:: html

      </details>





Method detail
-------------

.. py:method:: __enter__()

   Run initializing context manager.


.. py:method:: __exit__(type, value, traceback)

   Run when closing the context manager.


.. py:method:: __setattr__(key, value)

   __setattr__(CoreObject self, key, value)


.. py:method:: create_shell_bl_using_controls(part_id: int, shell_bl_control_ids: Iterable[int], shell_bl_params: ansys.meshing.prime.autogen.surferstructs.ShellBLParams) -> ansys.meshing.prime.autogen.surferstructs.CreateShellBLResults

   Create ShellBL using data stored in controls.

   :param part_id: Id of the part.
   :type part_id: int
   :param shell_bl_control_ids: Ids of ShellBL control.
   :type shell_bl_control_ids: Iterable[int]
   :param shell_bl_params: Parameters related to ShellBL.
   :type shell_bl_params: ShellBLParams

   :returns: Returns the CreateShellBLResults.
   :rtype: CreateShellBLResults

   .. rubric:: Notes

   **This is a beta API**. **The behavior and implementation may change in future**.

   .. rubric:: Examples

   >>> results = surfer.create_shell_bl_using_controls(part_id,
                                                       shell_bl_control_ids,
                                                       shell_bl_params)


.. py:method:: initialize_surfer_params_for_wrapper() -> ansys.meshing.prime.autogen.surferstructs.SurferParams

   Initialize surfer parameters to mesh surfaces generated by the wrapper.

   :returns: Surfer parameters initialized for wrapper inputs.
   :rtype: SurferParams

   .. rubric:: Examples

   >>> surfer = prime.Surfer(model)
   >>> surfer_params = surfer.initialize_surfer_params_for_wrapper()


.. py:method:: mesh_topo_faces(part_id: int, topo_faces: Iterable[int], params: ansys.meshing.prime.autogen.surferstructs.SurferParams) -> ansys.meshing.prime.autogen.surferstructs.SurferResults

   Perform meshing on TopoFaces with given parameters.

   :param part_id: ID of part.
   :type part_id: int
   :param topo_faces: IDs of the TopoFaces.
   :type topo_faces: Iterable[int]
   :param params: Surfer parameters.
   :type params: SurferParams

   :returns: Results from performing meshing on the TopoFaces.
   :rtype: SurferResults

   .. rubric:: Examples

   >>> surfer = prime.Surfer(model)
   >>> surfer_params = prime.SurferParams(model)
   >>> results = surfer.mesh_topo_faces(part_id, topo_faces, surfer_params)


.. py:method:: remesh_face_zonelets(part_id: int, face_zonelets: Iterable[int], edge_zonelets: Iterable[int], params: ansys.meshing.prime.autogen.surferstructs.SurferParams) -> ansys.meshing.prime.autogen.surferstructs.SurferResults

   Perform meshing on face zonelets with given parameters.

   :param part_id: ID of part.
   :type part_id: int
   :param face_zonelets: IDs of the face zonelets.
   :type face_zonelets: Iterable[int]
   :param edge_zonelets: IDs of the edge zonelets.
   :type edge_zonelets: Iterable[int]
   :param params: Surfer parameters.
   :type params: SurferParams

   :returns: Results from meshing the face zonelets.
   :rtype: SurferResults

   .. rubric:: Examples

   >>> surfer = prime.Surfer(model)
   >>> surfer_params = prime.SurferParams(model)
   >>> results = surfer.remesh_face_zonelets(part_id,
                   face_zonelets, edge_zonelets, surfer_params)


.. py:method:: remesh_face_zonelets_locally(part_id: int, face_zonelets: Iterable[int], register_id: int, local_surfer_params: ansys.meshing.prime.autogen.surferstructs.LocalSurferParams) -> ansys.meshing.prime.autogen.surferstructs.LocalSurferResults

   Remesh face zonelets locally at the registered faces with given parameters.

   :param part_id: ID of part.
   :type part_id: int
   :param face_zonelets: IDs of the face zonelets.
   :type face_zonelets: Iterable[int]
   :param register_id: Register ID of the target faces.
   :type register_id: int
   :param local_surfer_params: Local surfer parameters.
   :type local_surfer_params: LocalSurferParams

   :returns: Results from remeshing the face zonelets.
   :rtype: LocalSurferResults

   .. rubric:: Examples

   >>> surfer = prime.Surfer(model)
   >>> local_surfer_params = prime.LocalSurferParams(model)
   >>> results = surfer.remesh_face_zonelets_locally(part_id,
                   face_zonelets, register_id, local_surfer_params)







.. vale on